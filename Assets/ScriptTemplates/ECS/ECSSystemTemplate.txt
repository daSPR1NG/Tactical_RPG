using UnityEngine;
using dnSR_Coding.Utilities;
using NaughtyAttributes;
using Unity.Entities;
using Unity.Transforms;

namespace dnSR_Coding
{
    ///<summary> #SCRIPTNAME# description <summary>
	 public partial class #SCRIPTNAME# : SystemBase, IDebuggable
	 {
        //[Title( "TITLE", 12, "white" )]
        // Variables

        #region Debug

        [Space( 10 ), HorizontalLine( .5f, EColor.Gray )]
        [SerializeField] private bool _isDebuggable = true;
        public bool IsDebuggable => _isDebuggable;

        #endregion

		protected override void OnCreate()
        {
            base.OnCreate();
            Init();
        }

        protected override void OnStartRunning()
        {
            base.OnStartRunning();
        }

        private void Init() { }

        protected override void OnUpdate()
        {
            // Assign values to local variables captured in your job here, so that it has
            // everything it needs to do its work when it runs later.
            // For example,
            //     float deltaTime = Time.DeltaTime;

            // This declares a new kind of job, which is a unit of work to do.
            // The job is declared as an Entities.ForEach with the target components as parameters,
            // meaning it will process all entities in the world that have both
            // Translation and Rotation components. Change it to process the component
            // types you want.
        }


        #region OnValidate

#if UNITY_EDITOR

        private void OnValidate()
        {

        }
#endif

        #endregion
	 }    
}